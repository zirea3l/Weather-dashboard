{
  "version": 3,
  "sources": ["../../use-places-autocomplete/src/useLatest.ts", "../../use-places-autocomplete/src/debounce.ts", "../../use-places-autocomplete/src/usePlacesAutocomplete.ts", "../../use-places-autocomplete/src/utils.ts"],
  "sourcesContent": ["import type { RefObject } from \"react\";\nimport { useRef } from \"react\";\n\nexport default <T>(val: T): RefObject<T> => {\n  const ref = useRef(val);\n  ref.current = val;\n  return ref;\n};\n", "export default <F extends (...args: any[]) => void>(\n  fn: F,\n  delay: number\n): ((this: ThisParameterType<F>, ...args: Parameters<F>) => void) => {\n  let timer: ReturnType<typeof setTimeout> | null;\n\n  // eslint-disable-next-line func-names\n  return function (this: ThisParameterType<F>, ...args: Parameters<F>) {\n    if (timer !== null) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    timer = setTimeout(() => fn.apply(this, args), delay);\n  };\n};\n", "import { useState, useRef, useCallback, useEffect } from \"react\";\n\nimport useLatest from \"./useLatest\";\nimport _debounce from \"./debounce\";\n\nexport interface HookArgs {\n  requestOptions?: Omit<google.maps.places.AutocompletionRequest, \"input\">;\n  debounce?: number;\n  cache?: number | false;\n  cacheKey?: string;\n  googleMaps?: any;\n  callbackName?: string;\n  defaultValue?: string;\n  initOnMount?: boolean;\n}\n\ntype Suggestion = google.maps.places.AutocompletePrediction;\n\ntype Status = `${google.maps.places.PlacesServiceStatus}` | \"\";\n\ninterface Suggestions {\n  readonly loading: boolean;\n  readonly status: Status;\n  data: Suggestion[];\n}\n\ninterface SetValue {\n  (val: string, shouldFetchData?: boolean): void;\n}\n\ninterface HookReturn {\n  ready: boolean;\n  value: string;\n  suggestions: Suggestions;\n  setValue: SetValue;\n  clearSuggestions: () => void;\n  clearCache: (key?: string) => void;\n  init: () => void;\n}\n\nexport const loadApiErr =\n  \"ðŸ’¡ use-places-autocomplete: Google Maps Places API library must be loaded. See: https://github.com/wellyshen/use-places-autocomplete#load-the-library\";\n\nconst usePlacesAutocomplete = ({\n  requestOptions,\n  debounce = 200,\n  cache = 24 * 60 * 60,\n  cacheKey = \"upa\",\n  googleMaps,\n  callbackName,\n  defaultValue = \"\",\n  initOnMount = true,\n}: HookArgs = {}): HookReturn => {\n  const [ready, setReady] = useState(false);\n  const [value, setVal] = useState(defaultValue);\n  const [suggestions, setSuggestions] = useState<Suggestions>({\n    loading: false,\n    status: \"\",\n    data: [],\n  });\n  const asRef = useRef<google.maps.places.AutocompleteService>();\n  const requestOptionsRef = useLatest(requestOptions);\n  const googleMapsRef = useLatest(googleMaps);\n\n  const init = useCallback(() => {\n    if (asRef.current) return;\n\n    const { google } = window;\n    const { current: gMaps } = googleMapsRef;\n    const placesLib = gMaps?.places || google?.maps?.places;\n\n    if (!placesLib) {\n      console.error(loadApiErr);\n      return;\n    }\n\n    asRef.current = new placesLib.AutocompleteService();\n    setReady(true);\n  }, [googleMapsRef]);\n\n  const clearSuggestions = useCallback(() => {\n    setSuggestions({ loading: false, status: \"\", data: [] });\n  }, []);\n\n  const clearCache = useCallback(\n    (key = cacheKey) => {\n      try {\n        sessionStorage.removeItem(key);\n      } catch (error) {\n        // Skip exception\n      }\n    },\n    [cacheKey]\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const fetchPredictions = useCallback(\n    _debounce((val: string) => {\n      if (!val) {\n        clearSuggestions();\n        return;\n      }\n\n      setSuggestions((prevState) => ({ ...prevState, loading: true }));\n\n      let cachedData: Record<string, { data: Suggestion[]; maxAge: number }> =\n        {};\n\n      try {\n        cachedData = JSON.parse(sessionStorage.getItem(cacheKey) || \"{}\");\n      } catch (error) {\n        // Skip exception\n      }\n\n      if (cache) {\n        cachedData = Object.keys(cachedData).reduce(\n          (acc: typeof cachedData, key) => {\n            if (cachedData[key].maxAge - Date.now() >= 0)\n              acc[key] = cachedData[key];\n            return acc;\n          },\n          {}\n        );\n\n        if (cachedData[val]) {\n          setSuggestions({\n            loading: false,\n            status: \"OK\",\n            data: cachedData[val].data,\n          });\n          return;\n        }\n      }\n\n      asRef.current?.getPlacePredictions(\n        { ...requestOptionsRef.current, input: val },\n        (data: Suggestion[] | null, status: Status) => {\n          setSuggestions({ loading: false, status, data: data || [] });\n\n          if (cache && status === \"OK\") {\n            cachedData[val] = {\n              data: data as Suggestion[],\n              maxAge: Date.now() + cache * 1000,\n            };\n\n            try {\n              sessionStorage.setItem(cacheKey, JSON.stringify(cachedData));\n            } catch (error) {\n              // Skip exception\n            }\n          }\n        }\n      );\n    }, debounce),\n    [cache, cacheKey, clearSuggestions, requestOptionsRef]\n  );\n\n  const setValue: SetValue = useCallback(\n    (val, shouldFetchData = true) => {\n      setVal(val);\n      if (asRef.current && shouldFetchData) fetchPredictions(val);\n    },\n    [fetchPredictions]\n  );\n\n  useEffect(() => {\n    if (!initOnMount) return () => null;\n\n    const { google } = window;\n\n    if (!googleMapsRef.current && !google?.maps && callbackName) {\n      (window as any)[callbackName] = init;\n    } else {\n      init();\n    }\n\n    return () => {\n      // @ts-ignore\n      if ((window as any)[callbackName]) delete (window as any)[callbackName];\n    };\n  }, [callbackName, googleMapsRef, init, initOnMount]);\n\n  return {\n    ready,\n    value,\n    suggestions,\n    setValue,\n    clearSuggestions,\n    clearCache,\n    init,\n  };\n};\n\nexport default usePlacesAutocomplete;\n", "/* eslint-disable compat/compat */\n\ntype GeoArgs = google.maps.GeocoderRequest;\n\ntype GeocodeResult = google.maps.GeocoderResult;\n\ntype GeoReturn = Promise<GeocodeResult[] | null>;\n\nexport const geocodeErr =\n  \"ðŸ’¡ use-places-autocomplete: Please provide an address when using getGeocode() with the componentRestrictions.\";\n\nexport const getGeocode = (args: GeoArgs): GeoReturn => {\n  const geocoder = new window.google.maps.Geocoder();\n\n  return new Promise((resolve, reject) => {\n    geocoder.geocode(args, (results, status) => {\n      if (status !== \"OK\") reject(status);\n      if (!args.address && args.componentRestrictions) {\n        console.error(geocodeErr);\n        resolve(results);\n      }\n      resolve(results);\n    });\n  });\n};\n\ntype LatLng = { lat: number; lng: number };\n\nexport const getLatLng = (result: GeocodeResult): LatLng => {\n  const { lat, lng } = result.geometry.location;\n  return { lat: lat(), lng: lng() };\n};\n\ntype ZipCode = string | undefined;\n\nexport const getZipCode = (\n  result: GeocodeResult,\n  useShortName: false\n): ZipCode => {\n  const foundZip = result.address_components.find(({ types }) =>\n    types.includes(\"postal_code\")\n  );\n\n  if (!foundZip) return undefined;\n\n  return useShortName ? foundZip.short_name : foundZip.long_name;\n};\n\ntype GetDetailsArgs = google.maps.places.PlaceDetailsRequest;\n\ntype DetailsResult = Promise<google.maps.places.PlaceResult | null>;\n\nexport const getDetailsErr =\n  \"ðŸ’¡ use-places-autocomplete: Please provide a place Id when using getDetails() either as a string or as part of an Autocomplete Prediction.\";\n\nexport const getDetails = (args: GetDetailsArgs): DetailsResult => {\n  const PlacesService = new window.google.maps.places.PlacesService(\n    document.createElement(\"div\")\n  );\n\n  if (!args.placeId) {\n    console.error(getDetailsErr);\n    return Promise.reject(getDetailsErr);\n  }\n\n  return new Promise((resolve, reject) => {\n    PlacesService.getDetails(args, (results, status) => {\n      if (status !== \"OK\") reject(status);\n      resolve(results);\n    });\n  });\n};\n"],
  "mappings": "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",
  "names": ["val", "ref", "useRef", "current", "fn", "delay", "timer", "args", "clearTimeout", "setTimeout", "apply", "loadApiErr", "usePlacesAutocomplete", "requestOptions", "debounce", "cache", "cacheKey", "googleMaps", "callbackName", "defaultValue", "initOnMount", "useState", "ready", "setReady", "value", "setVal", "loading", "status", "data", "suggestions", "setSuggestions", "asRef", "requestOptionsRef", "useLatest", "googleMapsRef", "init", "useCallback", "window", "google", "gMaps", "placesLib", "places", "maps", "console", "error", "AutocompleteService", "clearSuggestions", "clearCache", "key", "sessionStorage", "removeItem", "fetchPredictions", "_debounce", "prevState", "cachedData", "JSON", "parse", "getItem", "Object", "keys", "reduce", "acc", "maxAge", "Date", "now", "getPlacePredictions", "input", "setItem", "stringify", "setValue", "shouldFetchData", "useEffect", "geocodeErr", "getGeocode", "geocoder", "Geocoder", "Promise", "resolve", "reject", "geocode", "results", "address", "componentRestrictions", "getLatLng", "result", "geometry", "location", "lat", "lng", "getZipCode", "useShortName", "foundZip", "address_components", "find", "types", "includes", "undefined", "short_name", "long_name", "getDetailsErr", "getDetails", "PlacesService", "document", "createElement", "placeId"]
}
